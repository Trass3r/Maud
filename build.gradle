// Gradle build script for the Maud project

plugins {
    id 'application'
}

ext { // current versions of libraries:
    jme3Version = '3.5.2-stable'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        //args '--forceDialog'
    }
    //args '--openGL3'
    //args '--openGL33'
    //args '--skipStartup'
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xbatch'
    jvmArgs '-Xms4g', '-Xmx4g'
    //jvmArgs '-XX:+PrintCompilation'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'maud.Maud'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
    maven { url 'https://jcenter.bintray.com' } // for SimMath
    maven { url 'https://jitpack.io' } // for jme3_xbuf_loader
}

dependencies {
    // from mavenCentral (or mavenLocal) repositories:
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    runtimeOnly    'com.github.nifty-gui:nifty-style-black:1.4.3'
    implementation 'com.github.stephengold:Heart:7.6.0'
    implementation 'com.github.stephengold:Acorus:0.9.15'
    implementation 'com.github.stephengold:jme3-utilities-nifty:0.9.29'
    implementation 'com.github.stephengold:Minie:4.8.1'
    implementation 'com.github.stephengold:SkyControl:1.0.2'
    implementation 'com.github.stephengold:jme-ttf:2.2.4'
    implementation 'com.github.stephengold:Wes:0.7.1'
    implementation 'org.jmonkeyengine:jme3-blender:3.3.2-stable'
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    implementation 'org.jmonkeyengine:jme3-lwjgl:' + jme3Version
    implementation 'org.jmonkeyengine:jme3-plugins:' + jme3Version
    //runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'
    implementation 'org.openjdk.nashorn:nashorn-core:15.3'

    // from jitpack repositories:
    implementation 'com.github.xbuf.jme3_xbuf:jme3_xbuf_loader:0.9.1'
}

tasks.register('runForceDialog', JavaExec) {
    args '--forceDialog'
    mainClass = 'maud.Maud'
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
tasks.register('cleanWrittenAssets', Delete) { // Acorus output directory
    delete 'Written Assets'
}
